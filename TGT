import requests
from datetime import datetime
import numpy as np
from scipy.signal import argrelextrema
from numpy import polyfit
import pandas as pd
import matplotlib.pyplot as plt

def generate_marketstack_report(api_key, symbols, filename="marketstack_report.json"):
    """
    Generates a Marketstack report in JSON format without using pandas.

    Args:
        api_key (str): Your Marketstack API key.
        symbols (str): Comma-separated string of stock symbols (e.g., "AAPL,MSFT,GOOG").
        filename (str): The name of the JSON file to create.
    """
    base_url = "http://api.marketstack.com/v1/eod"
    today = datetime.now().strftime("%Y-%m-%d")    

    params = {
        'access_key': api_key,
        'symbols': symbols,
        'date_from': "2024-03-01",
        'date_to': "2025-04-01",
        'limit': 31,
    }

    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()

        data = response.json()
        
        with open(filename, 'w') as f:
            import json
            json.dump(data, f, indent=4)

        print(f"Marketstack report saved to {filename}")
    except requests.exceptions.RequestException as e:
        print(f"Error during API request: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def analyze_trend(data):
    """
    Analyzes the trend of the closing prices in the Marketstack data.

    Args:
        data (dict): The Marketstack data in JSON format.
    """
    if 'data' in data and data['data']:
        closing_prices = [day['close'] for day in data['data']]
        dates = [i for i in range(len(closing_prices))]

        # Fit a linear trend line
        coefficients = polyfit(dates, closing_prices, 1)
        polynomial = np.poly1d(coefficients)
        trendline = polynomial(dates)

        # Determine trend direction
        if coefficients[0] > 0:
            print("Trend: Uptrend")
        elif coefficients[0] < 0:
            print("Trend: Downtrend")
        else:
            print("Trend: Sideways")

def find_support_resistance(data):
    """
    Finds potential support and resistance levels in the Marketstack data.

    Args:
        data (dict): The Marketstack data in JSON format.
    """
    if 'data' in data and data['data']:
        closing_prices = np.array([day['close'] for day in data['data']])

        # Find local maxima (potential resistance)
        maxima_indices = argrelextrema(closing_prices, np.greater)[0]
        maxima_prices = closing_prices[maxima_indices]
        print("Potential Resistance Levels:", maxima_prices)

        # Find local minima (potential support)
        minima_indices = argrelextrema(closing_prices, np.less)[0]
        minima_prices = closing_prices[minima_indices]
        print("Potential Support Levels:", minima_prices)
    else:
        print("No data found to analyze support and resistance.")




# Example usage (replace with your API key and symbols):
if __name__ == "__main__":
    api_key = "ebd13cb01404512ea3e1ab2ae81a7b0f"  # Get API key from environment variable
    symbols = "TGT"  # Example symbol
    generate_marketstack_report(api_key, symbols)

    # Load the generated report and analyze the trend
    with open("marketstack_report.json", 'r') as f:
        import json
        data = json.load(f)
        analyze_trend(data)
        find_support_resistance(data)
